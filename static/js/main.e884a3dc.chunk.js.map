{"version":3,"sources":["global_component/DeckConstructor.jsx","freecell/Card.jsx","freecell/Freecell.jsx","App.js","reportWebVitals.js","index.js"],"names":["DeckConstructor","values","deck","forEach","symbole","value","color","Card","index","stackIndex","place","card","onClick","pathImg","positionCard","backgroundImage","process","backgroundRepeat","backgroundSize","top","className","style","nbOfPlaceEmpty","Freecell","state","shuffle","board","freePlaces","winPlaces","heart","club","diamond","spade","cardsSelection","active","placeSelection","cards","firstCard","indexFirstCard","indexStackSelected","history","indexHistory","shiftingCard","cardIndex","shiftCards","cardsSelected","slice","length","impossibleSelection","map","valuesDescending","sort","a","b","diffBetweenValues","i","push","isFollowingValues","some","diff","every","colors","diffBetweenColors","includes","setState","historyNavigation","nav","disableSelection","this","distribution","newBoard","countPlaceEmpty","symboleCard","indexStackTarget","placeTarget","shiftAuthorized","newPlaceTarget","stackSelected","stackTarget","newFreePlaces","newWinPlaces","impossibleAction","splice","newPlaceSelection","cardTarget","symboleCardSelection","newHistory","console","log","screenWidth","window","innerWidth","heightSelection","height","bind","authorizationSelection","indexFreePlace","selectionMarker","Object","entries","display","alignItems","displaySymboleOnWinPlace","stack","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8TAmBeA,EAnBS,WACpB,IAAMC,EAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,IAEnDC,EAAO,GAaX,MAdiB,CAAC,eAAM,eAAM,eAAM,gBAE3BC,SAAQ,SAAAC,GAAY,IAAD,gBACFH,GADE,IACpB,2BAA0B,CAAC,IAAlBI,EAAiB,QACtBH,EAAI,sBAAOA,GAAP,CAAa,CACbG,MAAOA,EACPD,QAASA,EACTE,MAAmB,iBAAZF,GAAgC,iBAAZA,EAAmB,MAAQ,YAL1C,kCAYrBF,G,OCiBIK,EA9BF,SAAC,GAA+C,IAA9CC,EAA6C,EAA7CA,MAAOC,EAAsC,EAAtCA,WAAYC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QACvCR,EAAU,GACM,iBAAjBO,EAAKP,QAAoBA,EAAU,QACb,iBAAjBO,EAAKP,QAAoBA,EAAU,UAClB,iBAAjBO,EAAKP,QAAoBA,EAAU,QAClB,iBAAjBO,EAAKP,UAAoBA,EAAU,QAC3C,IAAMC,EAAK,UAAMM,EAAKN,OAChBQ,EAAO,eAAWT,EAAX,YAAsBC,EAAtB,QACTS,EAAe,CACfC,gBAAgB,OAAD,OAASC,kBAAyBH,EAAlC,KACfI,iBAAkB,YAClBC,eAAgB,SAUpB,OAPIJ,EADU,QAAVJ,EACY,2BAAOI,GAAP,IAAqBK,IAAI,QAGzB,2BAAOL,GAAP,IAAqBK,IAAI,GAAD,OAAa,GAARX,EAAL,QAKpC,qBACIY,UAAU,OACVR,QAAU,iBAAgB,QAAVF,EAAkB,KAAOE,EAAQJ,EAAOC,EAAYC,IACpEW,MAAOP,KCpBfQ,G,MAAiB,GAojBNC,E,4MAljBXC,MAAQ,CACJtB,KAAMuB,IAAQzB,KACd0B,MAAO,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IACpCC,WAAY,CAAC,GAAI,GAAI,GAAI,IACzBC,UAAW,CACPC,MAAO,GACPC,KAAM,GACNC,QAAS,GACTC,MAAO,IAEXC,eAAgB,CACZC,QAAQ,EACRC,eAAgB,GAChBC,MAAO,GACPC,UAAW,GACXC,eAAgB,GAChBC,mBAAoB,IAExBC,QAAS,GACTC,aAAc,G,EAsDlBC,aAAe,SAACC,EAAWlC,EAAYC,GAAW,IAAD,EACD,EAAKc,MAA1CE,EADsC,EACtCA,MAAOC,EAD+B,EAC/BA,WAAYM,EADmB,EACnBA,eACpBE,EAAiBzB,EAWvB,GATc,UAAVA,EACAA,EAAQgB,EAEO,SAAVhB,IACLA,EAAQiB,GAKRM,EAAeC,OA4Ef,EAAKU,WAAWnC,EAAYC,OA5EN,CACtB,IAAImC,EAAgBnC,EAAMD,GAAYqC,MAAMH,GAG5C,GAAGE,EAAcE,OAASzB,EAAiB,EACvC,EAAK0B,2BAGJ,GAAGH,EAAcE,OAAS,EAAE,CAG7B,IAAI9C,EAAS4C,EAAcI,KAAI,SAAAtC,GAAI,OAAIA,EAAKN,SACxC6C,EAAgB,YAAOjD,GAC3BiD,EAAmBA,EAAiBC,MAAK,SAACC,EAAEC,GAAH,OAASA,EAAID,KAGtD,IAFA,IAAIE,EAAoB,GAEfC,EAAI,EAAGA,EAAIL,EAAiBH,OAAQQ,IACzCD,EAAkBE,KAAKN,EAAiBK,EAAI,GAAKL,EAAiBK,IAGtE,IAAME,GAAqBH,EAAkBI,MAAK,SAAAC,GAAI,OAAa,IAATA,KAG1D,GAFyB1D,EAAO2D,OAAM,SAACvD,EAAOG,GAAR,OAAkBH,IAAU6C,EAAiB1C,OAE1DiD,EAAmB,CAIxC,IAFA,IAAII,EAAShB,EAAcI,KAAI,SAAAtC,GAAI,OAAIA,EAAKL,SACxCwD,EAAoB,GACfP,EAAI,EAAGA,EAAIM,EAAOd,OAAQQ,IAC5BM,EAAON,KAAOM,EAAON,EAAI,GACxBO,EAAkBN,MAAK,GAGvBM,EAAkBN,MAAK,IAGJM,EAAkBC,UAAS,GAElD,EAAKC,SAAS,CACV/B,eAAe,2BACRA,GADO,IAEVC,QAAQ,EACRC,eAAgBA,EAChBC,MAAO1B,EAAMD,GAAYqC,MAAMH,GAC/BN,UAAW3B,EAAMD,GAAYkC,GAC7BL,eAAgB,CAACK,GACjBJ,mBAAoB9B,MAK5B,EAAKuC,2BAIT,EAAKA,2BAKqB,IAAzBH,EAAcE,QACnB,EAAKiB,SAAS,CACV/B,eAAe,2BACRA,GADO,IAEVC,QAAQ,EACRC,eAAgBA,EAChBC,MAAO1B,EAAMD,GAAYqC,MAAMH,GAC/BN,UAAW3B,EAAMD,GAAYkC,GAC7BL,eAAgB,CAACK,GACjBJ,mBAAoB9B,Q,EAyPxCwD,kBAAoB,SAACC,GAAS,IAAD,EACO,EAAK1C,MAA9BiB,EADkB,EAClBA,aAAcD,EADI,EACJA,QACjB2B,EAAmB,GAEnBA,EADA,EAAK3C,MAAMS,eAAeC,OACP,CACfA,QAAQ,EACRC,eAAgB,GAChBC,MAAO,GACPC,UAAW,GACXC,eAAgB,GAChBC,mBAAoB,IAIR,eAAO,EAAKf,MAAMS,gBAI3B,SAARiC,EACqB,IAAjBzB,GACC,EAAKuB,SAAS,CACVtC,MAAOc,EAAQC,EAAe,GAAGf,MACjCC,WAAYa,EAAQC,EAAe,GAAGd,WACtCC,UAAWY,EAAQC,EAAe,GAAGb,UACrCa,aAAcA,EAAe,EAC7BR,eAAgBkC,IAIZ,SAARD,GACDzB,IAAiBD,EAAQO,OAAS,GACjC,EAAKiB,SAAS,CACVtC,MAAOc,EAAQC,EAAe,GAAGf,MACjCC,WAAYa,EAAQC,EAAe,GAAGd,WACtCC,UAAWY,EAAQC,EAAe,GAAGb,UACrCa,aAAcA,EAAe,EAC7BR,eAAgBkC,K,uDAjahC,WACIC,KAAKC,iB,0BAGT,WACI,IAAIC,EAAQ,YAAOF,KAAK5C,MAAME,OAC9B0C,KAAK5C,MAAMtB,KAAKC,SAAQ,SAAAQ,GACpB,IAAI,IAAI4C,EAAE,EAAGA,EAAE,EAAGA,IAAI,CAClB,GAAGA,EAAE,GAAKe,EAASf,GAAGR,OAAO,EAAE,CAC3BuB,EAASf,GAAT,sBAAkBe,EAASf,IAA3B,CAA+B5C,IAC/B,MAEC,GAAG4C,GAAG,GAAKe,EAASf,GAAGR,OAAO,EAAE,CACjCuB,EAASf,GAAT,sBAAkBe,EAASf,IAA3B,CAA+B5C,IAC/B,WAIZyD,KAAKJ,SAAS,CACVtC,MAAO4C,EACP9B,QAAS,CAAC,CACNd,MAAM,YAAK4C,GACX3C,WAAW,YAAKyC,KAAK5C,MAAMG,YAC3BC,UAAU,eAAKwC,KAAK5C,MAAMI,iB,oCAKtC,WAA0B,IAAD,EACOwC,KAAK5C,MAA1BE,EADc,EACdA,MAAOC,EADO,EACPA,WACV4C,EAAkB,EACtB5C,EAAWsB,KAAI,SAAAvC,GAAK,OAAqB,IAAjBA,EAAMqC,OAAewB,IAAoB,QACjE7C,EAAMuB,KAAI,SAAAvC,GAAK,OAAqB,IAAjBA,EAAMqC,OAAewB,IAAoB,QAC5DjD,EAAiBiD,I,sCAGrB,SAAyBC,GACrB,MAAmB,UAAhBA,EACQ,mBAAGpD,UAAU,UAAUC,MAAO,CAACf,MAAO,OAAtC,0BAEa,YAAhBkE,EACG,mBAAGpD,UAAU,UAAUC,MAAO,CAACf,MAAO,OAAtC,0BAEa,SAAhBkE,EACG,mBAAGpD,UAAU,UAAb,0BAEa,UAAhBoD,EACG,mBAAGpD,UAAU,UAAb,+BADN,I,wBAkGT,SAAWqD,EAAkBC,GACzB,IAAIC,GAAkB,EADe,EAEkBP,KAAK5C,MAArDE,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WAAYC,EAFW,EAEXA,UAAWK,EAFA,EAEAA,eACjCE,EAAiB,KACiB,UAAlCF,EAAeE,eACfA,EAAiBT,EAEsB,SAAlCO,EAAeE,iBACpBA,EAAiBR,GAGrB,IAAIiD,EAAiB,GAClBF,IAAgB9C,IACfgD,EAAc,YAAOF,IAGzB,IAAIG,EAAa,YAAO1C,EAAeF,EAAeM,qBAChDuC,EAAcJ,EAAYD,GAC5BH,EAAQ,YAAO5C,GACfqD,EAAa,YAAOpD,GACpBqD,EAAY,eAAOpD,GAEvB,GAAGkD,IAAgBD,EACfT,KAAKa,wBAEJ,GAAGP,IAAgBhD,EACpB,GAA2B,IAAvBoD,EAAY/B,OAGZ,GAFA8B,EAAcK,OAAOjD,EAAeK,eAAgBL,EAAeG,MAAMW,QAEtEZ,IAAmBT,EAClBkD,EAAe3C,EAAeM,oBAAsBsC,EACpDD,EAAeH,GAAf,sBAAuCG,EAAeH,IAAtD,YAA4ExC,EAAeG,QAC3FkC,EAAWM,EACXD,GAAkB,MAEjB,CACD,IAAMQ,EAAiB,YAAOhD,GAC9BgD,EAAkBlD,EAAeM,oBAAsBsC,EACvDD,EAAeH,GAAf,sBAAuCG,EAAeH,IAAtD,YAA4ExC,EAAeG,QAC3FkC,EAAWM,EACXG,EAAgBI,EAChBR,GAAkB,MAIrB,CACD,IAAMS,EAAaN,EAAYA,EAAY/B,OAAS,GAGpD,GAAKqC,EAAW/E,QAAU4B,EAAeI,UAAUhC,MAAQ,GAAO+E,EAAWhF,UAAY6B,EAAeI,UAAUjC,QAI9G,GAHAyE,EAAcK,OAAOjD,EAAeK,eAAgBL,EAAeG,MAAMW,QAGtEZ,IAAmBR,EAAW,CAC7B,IAAMwD,EAAiB,YAAOhD,GAC9BgD,EAAkBlD,EAAeM,oBAAsBsC,EACvDD,EAAeH,GAAf,sBAAuCG,EAAeH,IAAtD,YAA4ExC,EAAeG,QAC3FkC,EAAWM,EACXG,EAAgBI,EAChBR,GAAkB,OAKlBC,EAAe3C,EAAeM,oBAAsBsC,EACpDD,EAAeH,GAAf,sBAAuCG,EAAeH,IAAtD,YAA4ExC,EAAeG,QAC3FkC,EAAWM,EACXD,GAAkB,OAKtBP,KAAKa,wBAKZ,GAAGP,IAAgB/C,EACpB,GAAoC,IAAhCM,EAAeG,MAAMW,QAA2D,IAAzC2B,EAAYD,GAAkB1B,OAIrE,GAHA8B,EAAcK,OAAOjD,EAAeK,eAAgBL,EAAeG,MAAMW,QAGtEZ,IAAmBT,EAAO,CACzB,IAAMyD,EAAiB,YAAOhD,GAC9BgD,EAAkBlD,EAAeM,oBAAsBsC,EACvDD,EAAeH,GAAf,sBAAuCG,EAAeH,IAAtD,YAA4ExC,EAAeG,QAC3FkC,EAAWa,EACXJ,EAAgBH,EAChBD,GAAkB,OAKlBC,EAAe3C,EAAeM,oBAAsBsC,EACpDD,EAAeH,GAAf,sBAAuCG,EAAeH,IAAtD,YAA4ExC,EAAeG,QAC3F2C,EAAgBH,EAChBD,GAAkB,OAMtBP,KAAKa,wBAKR,GAAIP,IAAgB9C,EACrB,GAAmC,IAAhCK,EAAeG,MAAMW,OAAa,CACjC,IAAIsC,EAAuB,GAgB3B,GAfyC,iBAArCpD,EAAeI,UAAUjC,UACzBiF,EAAuB,SAEc,iBAArCpD,EAAeI,UAAUjC,UACzBiF,EAAuB,QAGc,iBAArCpD,EAAeI,UAAUjC,UACzBiF,EAAuB,WAGc,iBAArCpD,EAAeI,UAAUjC,UACzBiF,EAAuB,SAGxBZ,IAAqBY,GACpB,GAAwC,IAAnCpD,EAAeI,UAAUhC,OAAwD,IAAvCuB,EAAU6C,GAAkB1B,QAA4D,IAAvCnB,EAAU6C,GAAkB1B,QAAkBd,EAAeI,UAAUhC,QAAWuB,EAAU6C,GAAkB7C,EAAU6C,GAAkB1B,OAAQ,GAAG1C,MAAQ,EAAM,CAC/PwE,EAAcK,OAAOjD,EAAeK,eAAgBL,EAAeG,MAAMW,QACzE,IAAMoC,EAAiB,YAAOhD,GAC9BgD,EAAkBlD,EAAeM,oBAAsBsC,EACnD1C,IAAmBT,GACnB4C,EAAWa,EACXH,EAAY,2BACLpD,GADK,kBAEP6C,EAFO,sBAEgB7C,EAAU6C,IAF1B,CAE6CxC,EAAeI,cAExEsC,GAAkB,GAEbxC,IAAmBR,IACxBoD,EAAgBI,EAChBH,EAAY,2BACLpD,GADK,kBAEP6C,EAFO,sBAEgB7C,EAAU6C,IAF1B,CAE6CxC,EAAeI,cAExEsC,GAAkB,SAK1BP,KAAKa,wBAITb,KAAKa,mBAIb,GAAGN,EAAiB,CAChB,IAAMW,EAAU,YAAOlB,KAAK5C,MAAMgB,SAC/B4B,KAAK5C,MAAMiB,aAAgB2B,KAAK5C,MAAMgB,QAAQO,OAAS,GACtDuC,EAAWJ,OAAOd,KAAK5C,MAAMiB,aAAe,EAAG2B,KAAK5C,MAAMgB,QAAQO,OAASqB,KAAK5C,MAAMiB,cAE1F2B,KAAKJ,SAAS,CACVtC,MAAM,YAAK4C,GACX3C,WAAW,YAAKoD,GAChBnD,UAAU,eAAKoD,GACf/C,eAAgB,CACZC,QAAQ,EACRC,eAAgB,GAChBC,MAAO,GACPE,eAAgB,GAChBC,mBAAoB,IAExBC,QAAQ,GAAD,mBACA8C,GADA,CACY,CACX5D,MAAM,YAAK4C,GACX3C,WAAW,YAAKoD,GAChBnD,UAAU,eAAKoD,MAGvBvC,aAAc2B,KAAK5C,MAAMiB,aAAe,O,iCAKpD,WACI8C,QAAQC,IAAI,0B,8BAGhB,WACID,QAAQC,IAAI,qBACZpB,KAAKJ,SAAS,CACV/B,eAAgB,CACZC,QAAQ,EACRC,eAAgB,GAChBC,MAAO,GACPE,eAAgB,GAChBC,mBAAoB,Q,6BAKhC,WACI,IAAMkD,EAAcC,OAAOC,WACvBC,EAAkB,EAgBtB,OAfGH,EAAc,IACbG,EAAkB,GAEdH,GAAe,KAAOA,EAAc,IACxCG,EAAkB,GAEdH,GAAe,KAAOA,EAAc,IACxCG,EAAkB,GAEdH,GAAe,MACnBG,EAAkB,IAGtBL,QAAQC,IAAIpB,KAAK5C,MAAMS,eAAeG,MAAMW,QAGxC,qBACA3B,UAAU,YACVC,MAAO,CACHF,IAAI,GAAD,OAAgD,GAA3CiD,KAAK5C,MAAMS,eAAeK,eAA/B,MACHuD,OAAO,GAAD,OAAqD,IAA9CzB,KAAK5C,MAAMS,eAAeG,MAAMW,OAAS,GAAW6C,EAA3D,OAEVhF,QAAWwD,KAAKa,iBAAiBa,KAAK1B,U,oBA2E9C,WAAU,IAAD,OACLmB,QAAQC,IAAIpB,KAAK5C,MAAMiB,cACvB8C,QAAQC,IAAIpB,KAAK5C,MAAMgB,QAAQO,QAF1B,MAGkDqB,KAAK5C,MAArDE,EAHF,EAGEA,MAAOC,EAHT,EAGSA,WAAYC,EAHrB,EAGqBA,UAAWK,EAHhC,EAGgCA,eAErC,OADAmC,KAAK2B,yBAED,sBAAK3E,UAAU,SAAf,UACI,8CAEA,sBAAKA,UAAU,YAAf,UACI,qBAAKA,UAAU,cAAf,SACKO,EAAWsB,KAAI,SAACvC,EAAOsF,EAAgBrE,GAAxB,OACZ,sBACIP,UAAU,QAEVR,QAA4B,IAAjBF,EAAMqC,QAAkD,IAAhCd,EAAeG,MAAMW,OAAgB,WAAO,EAAKH,WAAWoD,EAAgBrE,IAAe,KAHlI,UAKsB,IAAjBjB,EAAMqC,OAAerC,EAAMuC,KAAI,SAACtC,EAAMgC,GAAP,OAC5B,cAAC,EAAD,CAEInC,MAAOmC,EACPlC,WAAYuF,EACZrF,KAAMA,EACND,MAAM,OACNE,QAAS,EAAK8B,cALTC,MAOR,KAEJV,EAAeC,QAAWD,EAAeM,qBAAuByD,GAAsD,SAAlC/D,EAAeE,eACpG,EAAK8D,kBAEH,OAjBGD,QAsBjB,qBAAK5E,UAAU,aAAf,SACK8E,OAAOC,QAAQvE,GAAWqB,KAAI,SAAC7C,GAC5B,IAAMoE,EAAcpE,EAAQ,GACtBgC,EAAQhC,EAAQ,GACtB,OACI,sBACIgB,UAAU,QAEVC,MAAO,CAAC+E,QAAS,OAAQC,WAAY,UACrCzF,QAAyC,IAAhCqB,EAAeG,MAAMW,OAAe,WAAO,EAAKH,WAAW4B,EAAa5C,IAAc,KAJnG,UAMK,EAAK0E,yBAAyB9B,GAC9BpC,EAAMa,KAAI,SAACtC,EAAMgC,GAAP,OACP,cAAC,EAAD,CAEInC,MAAOmC,EACPlC,WAAY+D,EACZ9D,MAAM,MACNC,KAAMA,GAJDgC,QAPR6B,WAqBzB,qBAAKpD,UAAU,QAAf,SACKM,EAAMuB,KAAI,SAACsD,EAAO9F,EAAYiB,GAApB,OACP,sBAAsBN,UAAU,QAAQR,QAAwC,IAA7Bc,EAAMjB,GAAYsC,QAAiD,IAAhCd,EAAeG,MAAMW,OAAgB,WAAO,EAAKH,WAAWnC,EAAYiB,IAAU,KAAxK,UACK6E,EAAMtD,KAAI,SAACtC,EAAMgC,GAAP,OACP,cAAC,EAAD,CAEInC,MAAOmC,EACPlC,WAAYA,EACZC,MAAM,QACNC,KAAMA,EACNC,QAAS,EAAK8B,cALTC,MASZV,EAAeC,QAAWD,EAAeM,qBAAuB9B,GAAkD,UAAlCwB,EAAeE,eAC5F,EAAK8D,kBACH,OAdAxF,QAmBlB,sBAAKW,UAAU,UAAf,UACI,qBAAKA,UAAU,aAAaR,QAAS,kBAAM,EAAKqD,kBAAkB,SAAlE,SAA2E,cAAC,IAAD,MAC3E,qBAAK7C,UAAU,aAAaR,QAAS,kBAAM,EAAKqD,kBAAkB,SAAlE,SAA2E,cAAC,IAAD,gB,GA5iBxEuC,aCERC,MARf,WACE,OACE,qBAAKrF,UAAU,MAAf,SACE,cAAC,EAAD,OCMSsF,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e884a3dc.chunk.js","sourcesContent":["const DeckConstructor = () => {\r\n    const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\r\n    const symboles = [\"♥️\", \"♦️\", \"♠️\", \"♣️\" ]\r\n    let deck = []\r\n    symboles.forEach(symbole => {\r\n            for (let value of values) {\r\n                deck = [...deck, {\r\n                    value: value,\r\n                    symbole: symbole,\r\n                    color: symbole === \"♥️\" || symbole === \"♦️\" ? \"red\" : \"black\"\r\n                }]\r\n            }\r\n        }\r\n    )\r\n    \r\n\r\n    return deck\r\n}\r\n\r\nexport default DeckConstructor","import React from 'react';\r\n\r\n\r\nconst Card = ({index, stackIndex, place, card, onClick}) => {\r\n    let symbole = \"\"\r\n    if(card.symbole === \"♥️\") { symbole = \"heart\" }\r\n    else if(card.symbole === \"♦️\") { symbole = \"diamond\" }\r\n    else if(card.symbole === \"♠️\") { symbole = \"spade\" }\r\n    else if(card.symbole === \"♣️\") { symbole = \"club\" }\r\n    const value = `${card.value}`\r\n    const pathImg = `/img/${symbole}/${value}.png`\r\n    let positionCard = {\r\n        backgroundImage: `url(${process.env.PUBLIC_URL + pathImg})`,\r\n        backgroundRepeat: \"no-repeat\",\r\n        backgroundSize: \"cover\",\r\n    }\r\n    if (place === \"win\"){\r\n        positionCard = {...positionCard, top: `0px`}\r\n    }\r\n    else {\r\n        positionCard = {...positionCard, top: `${index * 30}px`}\r\n    }\r\n\r\n    \r\n    return(\r\n        <div \r\n            className=\"card\" \r\n            onClick={ () => place === \"win\" ? null : onClick(index, stackIndex, place)} \r\n            style={positionCard}\r\n        ></div>\r\n    )\r\n}\r\n\r\nexport default Card","import React, { Component } from 'react';\r\nimport { HiArrowLeft, HiArrowRight } from \"react-icons/hi\";\r\nimport shuffle from 'lodash.shuffle';\r\n\r\nimport DeckConstructor from '../global_component/DeckConstructor';\r\nimport Card from './Card';\r\nimport './Freecell.scss';\r\n\r\nlet nbOfPlaceEmpty = 0\r\nclass Freecell extends Component {\r\n    state = {\r\n        deck: shuffle(DeckConstructor()),\r\n        board: [[], [], [], [], [], [], [], []],\r\n        freePlaces: [[], [], [], []],\r\n        winPlaces: {\r\n            heart: [], \r\n            club: [], \r\n            diamond: [], \r\n            spade: [],\r\n        },\r\n        cardsSelection: {\r\n            active: false,\r\n            placeSelection: \"\",\r\n            cards: [],\r\n            firstCard: [],\r\n            indexFirstCard: [],\r\n            indexStackSelected: [],\r\n        },\r\n        history: [],\r\n        indexHistory: 0,\r\n    }\r\n    \r\n    componentDidMount(){\r\n        this.distribution()\r\n    }\r\n\r\n    distribution(){\r\n        let newBoard = [...this.state.board]\r\n        this.state.deck.forEach(card => {\r\n            for(let i=0; i<8; i++){\r\n                if(i<4 && newBoard[i].length<7){\r\n                    newBoard[i] = [...newBoard[i], card]\r\n                    break\r\n                }\r\n                else if(i>=4 && newBoard[i].length<6){\r\n                    newBoard[i] = [...newBoard[i], card]\r\n                    break\r\n                }\r\n            }\r\n        })\r\n        this.setState({\r\n            board: newBoard,\r\n            history: [{\r\n                board: [...newBoard],\r\n                freePlaces: [...this.state.freePlaces],\r\n                winPlaces: {...this.state.winPlaces},\r\n            }]\r\n        })\r\n    }\r\n\r\n    authorizationSelection() {\r\n        const {board, freePlaces} = this.state\r\n        let countPlaceEmpty = 0\r\n        freePlaces.map(place => place.length === 0 ? countPlaceEmpty++ : null)\r\n        board.map(place => place.length === 0 ? countPlaceEmpty++ : null)\r\n        nbOfPlaceEmpty = countPlaceEmpty\r\n    }\r\n\r\n    displaySymboleOnWinPlace(symboleCard) {\r\n        if(symboleCard === \"heart\") {\r\n            return <p className=\"symbole\" style={{color: \"red\"}}>♥️</p>\r\n        }\r\n        else if(symboleCard === \"diamond\") {\r\n            return <p className=\"symbole\" style={{color: \"red\"}}>♦️</p>\r\n        }\r\n        else if(symboleCard === \"club\") {\r\n            return <p className=\"symbole\">♣️</p>\r\n        }\r\n        else if(symboleCard === \"spade\") {\r\n            return <p className=\"symbole\">♠️</p>\r\n        }\r\n    }\r\n\r\n    shiftingCard = (cardIndex, stackIndex, place) => {\r\n        const {board, freePlaces, cardsSelection} = this.state\r\n        const placeSelection = place\r\n\r\n        if (place === \"board\") {\r\n            place = board\r\n        }\r\n        else if (place === \"free\") {\r\n            place = freePlaces\r\n        }\r\n\r\n        \r\n        //Sélection des cartes\r\n        if(!cardsSelection.active){\r\n            let cardsSelected = place[stackIndex].slice(cardIndex)\r\n\r\n            // Autorisation sélection du nbre de cartes selon le nbre de places libres\r\n            if(cardsSelected.length > nbOfPlaceEmpty + 1){\r\n                this.impossibleSelection()\r\n            }\r\n            // Plusieurs cartes sélectionnés\r\n            else if(cardsSelected.length > 1){\r\n\r\n                //Controler si les valeurs cartes sont décroissant de 1\r\n                let values = cardsSelected.map(card => card.value)\r\n                let valuesDescending = [...values]\r\n                valuesDescending = valuesDescending.sort((a,b) => b - a)\r\n                let diffBetweenValues = []\r\n                \r\n                for (let i = 1; i < valuesDescending.length; i++) {\r\n                    diffBetweenValues.push(valuesDescending[i - 1] - valuesDescending[i])\r\n                }\r\n\r\n                const isFollowingValues = !diffBetweenValues.some(diff => diff !== 1)\r\n                let isValuesDescending = values.every((value, index) => value === valuesDescending[index])\r\n\r\n                if(isValuesDescending && isFollowingValues) {\r\n                    //Controler si les couleurs sont alternés\r\n                    let colors = cardsSelected.map(card => card.color)\r\n                    let diffBetweenColors = []\r\n                    for (let i = 1; i < colors.length; i++) {\r\n                        if(colors[i] !== colors[i - 1]){\r\n                            diffBetweenColors.push(true)\r\n                        }\r\n                        else{\r\n                            diffBetweenColors.push(false)\r\n                        }\r\n                    }\r\n                    const isAlternateColors = !diffBetweenColors.includes(false)\r\n                    if (isAlternateColors) {\r\n                        this.setState({\r\n                            cardsSelection: {\r\n                                ...cardsSelection, \r\n                                active: true, \r\n                                placeSelection: placeSelection,\r\n                                cards: place[stackIndex].slice(cardIndex),\r\n                                firstCard: place[stackIndex][cardIndex],\r\n                                indexFirstCard: [cardIndex],\r\n                                indexStackSelected: stackIndex,\r\n                            },\r\n                        })\r\n                    }\r\n                    else{\r\n                        this.impossibleSelection()\r\n                    }\r\n                }\r\n                else{\r\n                    this.impossibleSelection()\r\n                }\r\n            }\r\n\r\n            //une seule carte sélectionné\r\n            else if (cardsSelected.length === 1) {\r\n                this.setState({\r\n                    cardsSelection: {\r\n                        ...cardsSelection, \r\n                        active: true, \r\n                        placeSelection: placeSelection,\r\n                        cards: place[stackIndex].slice(cardIndex),\r\n                        firstCard: place[stackIndex][cardIndex],\r\n                        indexFirstCard: [cardIndex],\r\n                        indexStackSelected: stackIndex,\r\n                    },\r\n                })\r\n            }\r\n        }\r\n\r\n        //Déplacement manuel des cartes\r\n        else {\r\n            this.shiftCards(stackIndex, place)\r\n        }\r\n    }\r\n\r\n    shiftCards(indexStackTarget, placeTarget){\r\n        let shiftAuthorized = false\r\n        const {board, freePlaces, winPlaces, cardsSelection} = this.state\r\n        let placeSelection = null\r\n        if (cardsSelection.placeSelection === \"board\") {\r\n            placeSelection = board\r\n        }\r\n        else if (cardsSelection.placeSelection === \"free\") {\r\n            placeSelection = freePlaces\r\n        }\r\n\r\n        let newPlaceTarget = []\r\n        if(placeTarget !== winPlaces) {\r\n            newPlaceTarget = [...placeTarget]\r\n        }\r\n        \r\n        let stackSelected = [...placeSelection[cardsSelection.indexStackSelected]]\r\n        const stackTarget = placeTarget[indexStackTarget]\r\n        let newBoard = [...board]\r\n        let newFreePlaces = [...freePlaces]\r\n        let newWinPlaces = {...winPlaces}\r\n\r\n        if(stackTarget === stackSelected) {\r\n            this.impossibleAction()\r\n        }\r\n        else if(placeTarget === board){\r\n            if (stackTarget.length === 0) {\r\n                stackSelected.splice(cardsSelection.indexFirstCard, cardsSelection.cards.length)\r\n\r\n                if(placeSelection === board) {\r\n                    newPlaceTarget[cardsSelection.indexStackSelected] = stackSelected\r\n                    newPlaceTarget[indexStackTarget] = [...newPlaceTarget[indexStackTarget], ...cardsSelection.cards]\r\n                    newBoard = newPlaceTarget\r\n                    shiftAuthorized = true\r\n                }\r\n                else {\r\n                    const newPlaceSelection = [...placeSelection]\r\n                    newPlaceSelection[cardsSelection.indexStackSelected] = stackSelected\r\n                    newPlaceTarget[indexStackTarget] = [...newPlaceTarget[indexStackTarget], ...cardsSelection.cards]\r\n                    newBoard = newPlaceTarget\r\n                    newFreePlaces = newPlaceSelection\r\n                    shiftAuthorized = true\r\n                }\r\n                \r\n            }\r\n            else {\r\n                const cardTarget = stackTarget[stackTarget.length - 1]\r\n\r\n                //Vérification du symbole alterné et des valeurs qui se suivent avant déplacement\r\n                if ((cardTarget.value === cardsSelection.firstCard.value + 1) && (cardTarget.symbole !== cardsSelection.firstCard.symbole)){\r\n                    stackSelected.splice(cardsSelection.indexFirstCard, cardsSelection.cards.length)\r\n\r\n                    // de freePlaces à board\r\n                    if(placeSelection === freePlaces){\r\n                        const newPlaceSelection = [...placeSelection]\r\n                        newPlaceSelection[cardsSelection.indexStackSelected] = stackSelected\r\n                        newPlaceTarget[indexStackTarget] = [...newPlaceTarget[indexStackTarget], ...cardsSelection.cards]\r\n                        newBoard = newPlaceTarget\r\n                        newFreePlaces = newPlaceSelection\r\n                        shiftAuthorized = true\r\n                    }\r\n\r\n                    // de Board à Board\r\n                    else {\r\n                        newPlaceTarget[cardsSelection.indexStackSelected] = stackSelected\r\n                        newPlaceTarget[indexStackTarget] = [...newPlaceTarget[indexStackTarget], ...cardsSelection.cards]\r\n                        newBoard = newPlaceTarget\r\n                        shiftAuthorized = true\r\n                    }\r\n                    \r\n                }\r\n                else {\r\n                    this.impossibleAction()\r\n                }\r\n            }\r\n            \r\n        }\r\n        else if(placeTarget === freePlaces){\r\n            if((cardsSelection.cards.length === 1) && (placeTarget[indexStackTarget].length === 0 )) {\r\n                stackSelected.splice(cardsSelection.indexFirstCard, cardsSelection.cards.length)\r\n\r\n                //de Board à Freeplaces\r\n                if(placeSelection === board) {\r\n                    const newPlaceSelection = [...placeSelection]\r\n                    newPlaceSelection[cardsSelection.indexStackSelected] = stackSelected\r\n                    newPlaceTarget[indexStackTarget] = [...newPlaceTarget[indexStackTarget], ...cardsSelection.cards]\r\n                    newBoard = newPlaceSelection\r\n                    newFreePlaces = newPlaceTarget\r\n                    shiftAuthorized = true\r\n                }\r\n\r\n                // de Freeplace à un autre Freeplace\r\n                else {\r\n                    newPlaceTarget[cardsSelection.indexStackSelected] = stackSelected\r\n                    newPlaceTarget[indexStackTarget] = [...newPlaceTarget[indexStackTarget], ...cardsSelection.cards]\r\n                    newFreePlaces = newPlaceTarget\r\n                    shiftAuthorized = true\r\n                }\r\n                \r\n            }\r\n            else {\r\n                //mettre plus d'une carte dans un freePlace\r\n                this.impossibleAction()\r\n            }\r\n        }\r\n        \r\n        // Pour la victoiiiire\r\n        else if (placeTarget === winPlaces){\r\n            if(cardsSelection.cards.length === 1){\r\n                let symboleCardSelection = \"\"\r\n                if (cardsSelection.firstCard.symbole === \"♥️\") {\r\n                    symboleCardSelection = \"heart\"\r\n                }\r\n                if (cardsSelection.firstCard.symbole === \"♣️\") {\r\n                    symboleCardSelection = \"club\"\r\n                }\r\n\r\n                if (cardsSelection.firstCard.symbole === \"♦️\") {\r\n                    symboleCardSelection = \"diamond\"\r\n                }\r\n\r\n                if (cardsSelection.firstCard.symbole === \"♠️\") {\r\n                    symboleCardSelection = \"spade\"\r\n                }\r\n\r\n                if(indexStackTarget === symboleCardSelection) {\r\n                    if(((cardsSelection.firstCard.value === 1) && (winPlaces[indexStackTarget].length === 0)) || (((winPlaces[indexStackTarget].length !== 0) && (cardsSelection.firstCard.value === (winPlaces[indexStackTarget][winPlaces[indexStackTarget].length -1].value + 1))))){\r\n                        stackSelected.splice(cardsSelection.indexFirstCard, cardsSelection.cards.length)\r\n                        const newPlaceSelection = [...placeSelection]\r\n                        newPlaceSelection[cardsSelection.indexStackSelected] = stackSelected\r\n                        if (placeSelection === board) {\r\n                            newBoard = newPlaceSelection\r\n                            newWinPlaces = {\r\n                                ...winPlaces,\r\n                                [indexStackTarget]: [...winPlaces[indexStackTarget], cardsSelection.firstCard],\r\n                            }\r\n                            shiftAuthorized = true\r\n                        }\r\n                        else if (placeSelection === freePlaces){\r\n                            newFreePlaces = newPlaceSelection\r\n                            newWinPlaces = {\r\n                                ...winPlaces,\r\n                                [indexStackTarget]: [...winPlaces[indexStackTarget], cardsSelection.firstCard],\r\n                            }\r\n                            shiftAuthorized = true\r\n                        }   \r\n                    }\r\n                }\r\n                else {\r\n                    this.impossibleAction()\r\n                }\r\n            }\r\n            else {\r\n                this.impossibleAction()\r\n            }\r\n        }\r\n\r\n        if(shiftAuthorized) {\r\n            const newHistory = [...this.state.history]\r\n            if(this.state.indexHistory < (this.state.history.length - 1)) {\r\n                newHistory.splice(this.state.indexHistory + 1, this.state.history.length - this.state.indexHistory)\r\n            }\r\n            this.setState({\r\n                board: [...newBoard],\r\n                freePlaces: [...newFreePlaces],\r\n                winPlaces: {...newWinPlaces},\r\n                cardsSelection: {\r\n                    active: false,\r\n                    placeSelection: \"\",\r\n                    cards: [],\r\n                    indexFirstCard: [],\r\n                    indexStackSelected: [],\r\n                },\r\n                history: [\r\n                    ...newHistory, {\r\n                        board: [...newBoard],\r\n                        freePlaces: [...newFreePlaces],\r\n                        winPlaces: {...newWinPlaces},\r\n                    }\r\n                ],\r\n                indexHistory: this.state.indexHistory + 1,\r\n            })\r\n        }\r\n    }\r\n\r\n    impossibleSelection() {\r\n        console.log(\"Selection Impossible\")\r\n    }\r\n\r\n    impossibleAction() {\r\n        console.log(\"Action Impossible\");\r\n        this.setState({\r\n            cardsSelection: {\r\n                active: false,\r\n                placeSelection: \"\",\r\n                cards: [],\r\n                indexFirstCard: [],\r\n                indexStackSelected: [],\r\n            },\r\n        })\r\n    }\r\n\r\n    selectionMarker(){\r\n        const screenWidth = window.innerWidth\r\n        let heightSelection = 0;\r\n        if(screenWidth < 470 ) {\r\n            heightSelection = 36\r\n        }\r\n        else if(screenWidth >= 470 && screenWidth < 650 ) {\r\n            heightSelection = 46\r\n        }\r\n        else if(screenWidth >= 650 && screenWidth < 950 ) {\r\n            heightSelection = 69\r\n        }\r\n        else if(screenWidth >= 950) {\r\n            heightSelection = 94\r\n        }\r\n\r\n        console.log(this.state.cardsSelection.cards.length);\r\n\r\n        return (\r\n            <div \r\n            className=\"selection\" \r\n            style={{\r\n                top: `${this.state.cardsSelection.indexFirstCard * 30}px`, \r\n                height: `${((this.state.cardsSelection.cards.length - 1) * 30) + heightSelection}px`\r\n            }}\r\n            onClick = {this.impossibleAction.bind(this)}\r\n            >\r\n            </div> \r\n        )\r\n        \r\n    }\r\n\r\n\r\n\r\n    //----------------------------History-----------------------\r\n    historyNavigation = (nav) => {\r\n        const {indexHistory, history} = this.state\r\n        let disableSelection = {}\r\n        if (this.state.cardsSelection.active) {\r\n            disableSelection = {\r\n                active: false,\r\n                placeSelection: \"\",\r\n                cards: [],\r\n                firstCard: [],\r\n                indexFirstCard: [],\r\n                indexStackSelected: [],\r\n            }\r\n        }\r\n        else {\r\n            disableSelection = {...this.state.cardsSelection}\r\n        }\r\n\r\n\r\n        if(nav === \"back\"){\r\n            if(indexHistory !== 0) {\r\n                this.setState({\r\n                    board: history[indexHistory - 1].board,\r\n                    freePlaces: history[indexHistory - 1].freePlaces,\r\n                    winPlaces: history[indexHistory - 1].winPlaces,\r\n                    indexHistory: indexHistory - 1,\r\n                    cardsSelection: disableSelection,\r\n                })\r\n            }\r\n        }\r\n        else if(nav === \"next\"){\r\n            if(indexHistory !== history.length - 1) {\r\n                this.setState({\r\n                    board: history[indexHistory + 1].board,\r\n                    freePlaces: history[indexHistory + 1].freePlaces,\r\n                    winPlaces: history[indexHistory + 1].winPlaces,\r\n                    indexHistory: indexHistory + 1,\r\n                    cardsSelection: disableSelection,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n// \r\n//          000000000000000\r\n//          00000000000000000000\r\n//          000             0000\r\n//          000             0000\r\n//          000             0000\r\n//          000             0000\r\n//          000             0000\r\n//          000             0000\r\n//          000             0000\r\n//          000         00000    \r\n//          00000000000000            \r\n//          00000000000000            \r\n//          000         00000\r\n//          000             0000\r\n//          000             0000\r\n//          000             0000\r\n//          000             0000\r\n//          000             0000\r\n// \r\n// \r\n\r\n    render() {\r\n        console.log(this.state.indexHistory)\r\n        console.log(this.state.history.length)\r\n        const {board, freePlaces, winPlaces, cardsSelection} = this.state\r\n        this.authorizationSelection()\r\n        return (\r\n            <div className=\"carpet\">\r\n                <p>Test Freecell</p>\r\n\r\n                <div className=\"top-board\">\r\n                    <div className=\"free-places\">\r\n                        {freePlaces.map((place, indexFreePlace, freePlaces) => (\r\n                            <div \r\n                                className=\"place\" \r\n                                key={indexFreePlace} \r\n                                onClick= {(place.length === 0) && (cardsSelection.cards.length !== 0) ? () => {this.shiftCards(indexFreePlace, freePlaces)} : null}>\r\n                                \r\n                                {place.length === 1 ? place.map((card, cardIndex) => (\r\n                                    <Card \r\n                                        key={cardIndex} \r\n                                        index={cardIndex} \r\n                                        stackIndex={indexFreePlace}\r\n                                        card={card}\r\n                                        place=\"free\"\r\n                                        onClick={this.shiftingCard}\r\n                                    />\r\n                                )) : null }\r\n                                {/*Marqueur de sélection */}\r\n                                {cardsSelection.active && (cardsSelection.indexStackSelected === indexFreePlace) && (cardsSelection.placeSelection === \"free\") ? \r\n                                this.selectionMarker()\r\n                                \r\n                                : null\r\n                            }\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                    <div className=\"win-places\">\r\n                        {Object.entries(winPlaces).map((symbole) => {\r\n                            const symboleCard = symbole[0]\r\n                            const cards = symbole[1]\r\n                            return (\r\n                                <div \r\n                                    className=\"place\" \r\n                                    key={symboleCard} \r\n                                    style={{display: \"flex\", alignItems: \"center\"}} \r\n                                    onClick={cardsSelection.cards.length !== 0 ? () => {this.shiftCards(symboleCard, winPlaces)} : null}>\r\n\r\n                                    {this.displaySymboleOnWinPlace(symboleCard)}\r\n                                    {cards.map((card, cardIndex) => (\r\n                                        <Card \r\n                                            key={cardIndex} \r\n                                            index={cardIndex} \r\n                                            stackIndex={symboleCard}\r\n                                            place=\"win\"\r\n                                            card={card}\r\n                                        />\r\n                                    ))}\r\n                                </div>\r\n                            )\r\n                        }\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"board\">\r\n                    {board.map((stack, stackIndex, board) => (\r\n                        <div key={stackIndex} className=\"place\" onClick = {board[stackIndex].length === 0 && (cardsSelection.cards.length !== 0) ? () => {this.shiftCards(stackIndex, board)} : null}>\r\n                            {stack.map((card, cardIndex) => (\r\n                                <Card \r\n                                    key={cardIndex} \r\n                                    index={cardIndex} \r\n                                    stackIndex={stackIndex}\r\n                                    place=\"board\"\r\n                                    card={card}\r\n                                    onClick={this.shiftingCard}\r\n                                />\r\n                            ))}\r\n                            {/*Marqueur de sélection */}\r\n                            {cardsSelection.active && (cardsSelection.indexStackSelected === stackIndex) && (cardsSelection.placeSelection === \"board\") ? \r\n                                this.selectionMarker()\r\n                                : null\r\n                            }\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"options\">\r\n                    <div className=\"arrow back\" onClick={() => this.historyNavigation(\"back\")}><HiArrowLeft/></div>\r\n                    <div className=\"arrow next\" onClick={() => this.historyNavigation(\"next\")}><HiArrowRight/></div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Freecell;","import './App.css';\r\nimport Freecell from './freecell/Freecell';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Freecell />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}